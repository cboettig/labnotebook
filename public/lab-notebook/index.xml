<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lab Notebook on Boettiger Group</title>
    <link>/lab-notebook/</link>
    <description>Recent content in Lab Notebook on Boettiger Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/lab-notebook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Rectangling with jq</title>
      <link>/2017/12/11/data-rectangling-with-jq/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/11/data-rectangling-with-jq/</guid>
      <description>“Data rectangling”: the process of turning highly nested data structures (e.g. JSON, XML) into a tabular format.
 Data rectangling is a brilliant turn of phrase coined by Jenny Bryan (UBC, RStudio) and leader in the #rstats community. Recording or slides of Jenny’s talk on the subject give a much better intro to the idea and working with this in R, particularly through the purrr package.</description>
    </item>
    
    <item>
      <title>JSON-LD Vita exploration</title>
      <link>/2017/12/09/json-ld-vita-exploration/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/09/json-ld-vita-exploration/</guid>
      <description>Using JSON Queries (JQ) Pure JSON vita &amp;lt;- readr::read_file(&amp;quot;../../static/js/vita.json&amp;quot;) jq(vita, &amp;#39;.&amp;quot;@reverse&amp;quot;.author[] | { year: .dateCreated, author: .author[] | [.givenName, .familyName] | join(&amp;quot; &amp;quot;) }&amp;#39;) %&amp;gt;% combine() %&amp;gt;% fromJSON()   year author    2017-12-09 Wayne M. Getz  2017-12-09 Charles R. Marshall  2017-12-09 Colin J. Carlson  2017-12-09 Luca Giuggioli  2017-12-09 Sadie J. Ryan  2017-12-09 Stephanie S. Romañach  2017-12-09 Carl Boettiger  2017-12-09 Samuel D.</description>
    </item>
    
    <item>
      <title>Using travis-ci in research compendia and student repos</title>
      <link>/2017/05/17/using-travis-ci-in-research-compendia-and-student-repos/</link>
      <pubDate>Wed, 17 May 2017 22:00:15 +0000</pubDate>
      
      <guid>/2017/05/17/using-travis-ci-in-research-compendia-and-student-repos/</guid>
      <description>In general I’m a big believer in the R package mechanism as a convenient way to package and distribute a reproducible compendium of code, data, notebooks and manuscripts. However, it’s often overkill, particularly since passing basic continuous integration checks (e.g. via devtools::use_travis()) means running a relatively strict R CMD check that will worry about things such as documentation norms and details that aren’t always appropriate.
What I most want is an easy way to confirm that any .</description>
    </item>
    
    <item>
      <title>json-ld framing strategy</title>
      <link>/2017/05/17/json-ld-framing-strategy/</link>
      <pubDate>Wed, 17 May 2017 21:57:15 +0000</pubDate>
      
      <guid>/2017/05/17/json-ld-framing-strategy/</guid>
      <description>Parsing very nested JSON documents can be a pain. Here are some notes on co-opting the strategy of “Framing” used in JSON-LD. (Note that unlike the basic operations of compaction and expansion, the JSON-LD framing algorithm actually is essentially independent of the @context and any linked data concepts.
Here’s a toy example of some nested JSON. Very nested structures are usually the source of issues for me, even with purrr, because often I want to pull data found at various different levels of nesting into a single row for the data.</description>
    </item>
    
    <item>
      <title>New rocker releases</title>
      <link>/2017/04/27/new-rocker-releases/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/04/27/new-rocker-releases/</guid>
      <description>R 3.4.0 and devel tags are now available in the Rocker versioned stack, and latest has been updated to 3.4.0.
This means you can now run something like:
docker run -d -p 8787:8787 rocker/tidyverse:devel to test out a recent version1 of R devel in RStudio with the tidyverse packages already installed. Note that the packages are not themselves devel versions (e.g. from GitHub) but are instead the latest versions from CRAN, just as in the latest tag.</description>
    </item>
    
    <item>
      <title>Migrating to Hugo and blogdown</title>
      <link>/2017/04/19/migrating-to-hugo-and-blogdown/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/04/19/migrating-to-hugo-and-blogdown/</guid>
      <description>After OpenWetWare (2010), Wordpress (2010 - 2012) and Jekyll (2012 - 2017), I move platforms once again: now to Hugo. Why the move? As usual, this site remains a way for me to explore new technologies, but the cutting edge is by no means the allure which leads me to migrate. Rather, I find myself ever trying to move towards simpler platforms, what’s easier to maintain, free to host, easier to replicate, and what makes best use of the most widely available and well-maintained existing software and avoids unncessary custom hacks.</description>
    </item>
    
  </channel>
</rss>